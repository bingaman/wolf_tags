h1. WolfTags Plugin Documentation

h2. Brief

Wolf tags are similar to XHTML or XML tags. With the _WolfTags Plugin_ enabled, you can use a set of standard WolfTags and even create more of your own.

_WolfTags Plugin_ will add a similar functionality to Wolf CMS as that offered by "Radius tags":http://wiki.github.com/radiant/radiant/radius-tags in Radiant CMS (but with a preceding 'w:' instead of 'r:').

WolfTags may be used in a Page, Snippet, or Layout. See the Sample Layout (included) for further examples of usage.

h2. Configuration

*Optional*: To allow execution of PHP code as common in Wolf CMS add the line:

<pre>
define(ALLOW_PHP, true);
</pre>

to @WOLF_ROOT/config.php@. (As this file is normally not writable you have to give yourself write permission to that file first!) Otherwise, _only_ WolfTags will be available for dynamic functions in the backend.

h2. Defining Tags

The following example shows how Wolf tags can be defined:

<pre>
include_once(CORE_ROOT.'/plugins/wolf_tags/index.php');
class MyTags extends WolfTags {
	public function tag_title() {
		return $this->page->title();
	}
}
</pre>

As you can guess the tag defined above will output the current page's title.

The _WolfTags Plugin_ will automatically collect all methods whose names start with @tag_@ and whose classes are derived from class @WolfTags@.

The include line is required to ensure that the class @WolfTags@ is defined before it is used to derive another class from it.

h2. Using tags

WolfTags can be included on pages which use either the Textile or Markdown text filter. (And usage with Textile does not require any "notextile." markup.)

The tage defined above could be used inside a page like this:

<pre>
Welcome to page <w:title />
</pre>

The following is also allowed:

<pre>
Welcome to page <w:title></w:title>
</pre>

h2. Using arguments

It is possible to pass arguments to a tag in the usual format @argument="value"@. For example:

<pre>
Welcome to page <w:title uppercase="yes" />
</pre>

The arguments passed can be accessed inside a tag definition using the array @$args@. For example:

<pre>
public function tag_title() {
	if ($this->args['uppercase'] == 'yes')
		return strtoupper($this->page->title());
	else
		return $this->page->title();
}
</pre>

To mark an argument as _required_ you can call the method @require_argument()@ inside the tag definition. This method will return the required argument's value as well (or throw an exception if the argument has not been passed).

h2. Tag content and nested tags

Like HTML tags, Wolf tags can wrap around content as well. For example:

<pre>
<w:uppercase>Welcome to page <w:title /></w:uppercase>
</pre>

The content can be accessed inside a tag definition using the member variable @$content@. To parse the content and get the parsed result use the method @expand()@. For example:

<pre>
public function tag_uppercase() {
	return strtoupper($this->expand());
}
</pre>

It is also possible to pass some default arguments to the child tags. For example:

<pre>
public function tag_uppercase() {
	$defaultArgs = array('uppercase' => 'yes');
	return $this->expand($defaultArgs);
}
</pre>

To access the parent tag inside a tag definition use the member variable @$parent@. As @$parent@ is a reference any changes made to @$parent@ will affect the parent tag as well.

As a shortcut, nested tags can be written for example as:

<pre><w:children:each status="all">...</w:children:each></pre>

This is equivalent to:

<pre><w:children status="all"><w:each status="all">...</w:each></w:children></pre>
